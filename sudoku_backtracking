def print_sudoku(sudoku):
    for i in range(len(sudoku)):
        if i % 3 == 0 and i != 0:
            print("- - - - - - - - - - - - -")

        for j in range(len(sudoku[0])):
            if j % 3 == 0 and j != 0:
                print("| ", end="")

            if j == 8:
                print(sudoku[i][j])
            else:
                print(str(sudoku[i][j]) + " ", end="")


def find_empty_cell(sudoku):
    for row in range(len(sudoku)):
        for col in range(len(sudoku[0])):
            if sudoku[row][col] == 0:
                return row, col
    return None


def is_valid(sudoku, num, pos):
    # Verificar a linha
    for i in range(len(sudoku[0])):
        if sudoku[pos[0]][i] == num and pos[1] != i:
            return False

    # Verificar a coluna
    for i in range(len(sudoku)):
        if sudoku[i][pos[1]] == num and pos[0] != i:
            return False

    # Verificar o quadrante 3x3
    box_row = pos[0] // 3
    box_col = pos[1] // 3

    for i in range(box_row * 3, box_row * 3 + 3):
        for j in range(box_col * 3, box_col * 3 + 3):
            if sudoku[i][j] == num and (i, j) != pos:
                return False

    return True


def solve_sudoku(sudoku):
    empty_cell = find_empty_cell(sudoku)
    if not empty_cell:
        return True

    row, col = empty_cell

    for num in range(1, 10):
        if is_valid(sudoku, num, (row, col)):
            sudoku[row][col] = num

            if solve_sudoku(sudoku):
                return True

            sudoku[row][col] = 0

    return False


if __name__ == '__main__':
    # Defina o tabuleiro do Sudoku
    sudoku_board = [
        [5, 3, 0, 0, 7, 0, 0, 0, 0],
        [6, 0, 0, 1, 9, 5, 0, 0, 0],
        [0, 9, 8, 0, 0, 0, 0, 6, 0],
        [8, 0, 0, 0, 6, 0, 0, 0, 3],
        [4, 0, 0, 8, 0, 3, 0, 0, 1],
        [7, 0, 0, 0, 2, 0, 0, 0, 6],
        [0, 6, 0, 0, 0, 0, 2, 8, 0],
        [0, 0, 0, 4, 1, 9, 0, 0, 5],
        [0, 0, 0, 0, 8, 0, 0, 7, 9]
    ]

    print("Sudoku inicial:")
    print_sudoku(sudoku_board)

    solve_sudoku(sudoku_board)

    print("\nSudoku resolvido:")
    print_sudoku(sudoku_board)
